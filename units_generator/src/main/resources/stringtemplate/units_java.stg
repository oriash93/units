group units;

declaration() ::= <<
/* This file is auto generated.
 * DO NOT EDIT IT MANUALLY!
 */
>>

unit_type_interface(unitType) ::= <<
<declaration()>
package com.units.<unitType.packageName>;

import com.units.Unit;
import com.units.exceptions.IllegalUnitsCasting;
import com.units.internal.Ratio;
<unitType.imports:{module | import <module>;<\n>}>

public interface <unitType.className> extends Unit {

	public static final Ratio _typeCode =
		<unitType.code>;

	default public \<E extends <unitType.className>\> E castTo(Class\<E\> toClass) {
		try {
			double toScale = (double)toClass.getField("_scale").get(null);
			double newValue = value() * scale() / toScale;
			return toClass.getDeclaredConstructor(double.class).newInstance(newValue);
		}
		catch (ReflectiveOperationException e) {
			throw new IllegalUnitsCasting();
		}
	}

	@Override
	default public Ratio typeCode() {
		return _typeCode;
	};
}
>>

unit_scale_class(unitScale) ::= <<
<declaration()>
package com.units.<unitScale.packageName>;

import com.units.internal.*;
<unitScale.imports:{module | import <module>;<\n>}>

public class <unitScale.className> extends NumericValue implements <unitScale.typeInterfaceName>{

	public static final double _scale =
		<unitScale.scale>;
	
	public <unitScale.className>(double value) {
		super(value);
	}

	@Override
	public String pluralName() {
		return "<unitScale.pluralName>";
	}
	
	@Override
	public double scale() {
		return _scale;
	}
	
	public static <unitScale.className> zero() {
		return new <unitScale.className>(0);
	}
	
	public static <unitScale.className> one() {
		return new <unitScale.className>(1);
	}
	
	public <unitScale.className> plus(<unitScale.className> other) {
		return new <unitScale.className>(value() + other.value());
	}
	
	public <unitScale.className> minus(<unitScale.className> other) {
		return new <unitScale.className>(value() - other.value());
	}
	
	public <unitScale.className> opposite() {
		return new <unitScale.className>(-value());
	}

	public <unitScale.className> multiplyByScalar(double scalar) {
		return new <unitScale.className>(scalar * value());
	}
	
	public <unitScale.className> divideByScalar(double scalar) {
		return new <unitScale.className>(value() / scalar);
	}
	
	public boolean equals(<unitScale.className> other) {
		if (other == null)
			return false;
		return almostEqualsValue(other.value());
	}
}
>>

unit_scale_class_tests(unitScale) ::= <<
<declaration()>
package com.units.tests.<unitScale.packageName>;

import org.junit.Test;

import com.units.<unitScale.packageName>.<unitScale.className>;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

public class <unitScale.className>Tests {

	public void assertSameValue(double value1, double value2) {
		assertTrue("unit value is " + value1 + " instead of " + value2, value1 == value2);
	}

	@Test
	public void testConstructor() {
		double actualValue = 3.1;
		assertSameValue(new <unitScale.className>(actualValue).value(), actualValue);
	}

	@Test
	public void testZero() {
		<unitScale.className> zero = <unitScale.className>.zero();
		assertSameValue(zero.value(), 0);
	}

	@Test
	public void testOne() {
		<unitScale.className> one = <unitScale.className>.one();
		assertSameValue(one.value(), 1);
	}

	@Test
	public void testEqualsSuccess() {
		double actualValue = 3.1;
		assertTrue("two units are not equal, even though thet have the same value",
				new <unitScale.className>(actualValue).equals(new <unitScale.className>(actualValue)));
	}

	@Test
	public void testEqualsNullFails() {
		double actualValue = 3.1;
		assertFalse("two units are equal, even though one of the is null", new <unitScale.className>(actualValue).equals(null));
	}

	@Test
	public void testEqualsOtherWithDifferemtValueFail() {
		double value1 = 3.1;
		double value2 = 3.0;
		assertFalse("two units are equal, even though thet have the different values",
				new <unitScale.className>(value1).equals(new <unitScale.className>(value2)));
	}

	@Test
	public void testPlus() {
		double value1 = 3.1;
		double value2 = 2.6;
		double resultValue = 5.7;

		<unitScale.className> unit1 = new <unitScale.className>(value1);
		<unitScale.className> unit2 = new <unitScale.className>(value2);
		<unitScale.className> result = unit1.plus(unit2);

		assertSameValue(unit1.value(), value1);
		assertSameValue(unit2.value(), value2);
		assertSameValue(result.value(), resultValue);
	}

	@Test
	public void testMinus() {
		double value1 = 3.1;
		double value2 = 2.6;
		double resultValue = 0.5;

		<unitScale.className> unit1 = new <unitScale.className>(value1);
		<unitScale.className> unit2 = new <unitScale.className>(value2);
		<unitScale.className> result = unit1.minus(unit2);

		assertSameValue(unit1.value(), value1);
		assertSameValue(unit2.value(), value2);
		assertSameValue(result.value(), resultValue);
	}

	@Test
	public void testopposite() {
		double value = 3.1;

		<unitScale.className> unit = new <unitScale.className>(value);
		<unitScale.className> result = unit.opposite();

		assertSameValue(unit.value(), value);
		assertSameValue(result.value(), -value);
	}

	@Test
	public void testMultiplyByScalar() {
		double value = 3.1;
		double scalar = 5;
		double resultValue = 15.5;

		<unitScale.className> unit = new <unitScale.className>(value);
		<unitScale.className> result = unit.multiplyByScalar(scalar);

		assertSameValue(unit.value(), value);
		assertSameValue(result.value(), resultValue);
	}

	@Test
	public void testDivideByScalar() {
		double value = 3.1;
		double scalar = 5;
		double resultValue = 0.62;

		<unitScale.className> unit = new <unitScale.className>(value);
		<unitScale.className> result = unit.divideByScalar(scalar);

		assertSameValue(unit.value(), value);
		assertSameValue(result.value(), resultValue);
	}

	@Test
	public void testToString() {
		double value = 3.1;
		String stringValue = "3.1 <unitScale.pluralName>";

		<unitScale.className> unit = new <unitScale.className>(value);
		assertTrue("string value is \"" + unit.toString() + "\" instead of \"" + stringValue + "\"",
				unit.toString().equals(stringValue));
	}
}
>>

conversion_test_case(testCase) ::= <<
@Test
public void <testCase.name>() {
	checkCastedValue(<testCase.from>.one().castTo(<testCase.to>.class).value(), <testCase.value>);
}
<\n>
>>

conversion_test_suite(testSuite) ::= <<
<declaration()>
package com.units.tests.casting;

import org.junit.Test;
import com.units.<testSuite.packageName>.*;

public class <testSuite.name> extends CastingTestsBase{

	<testSuite.testCases:conversion_test_case()>
}
>>
