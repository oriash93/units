group units;

declaration() ::= <<
/* This file is auto generated.
 * DO NOT EDIT IT MANUALLY!
 */
>>

full_scale_declaration(scale) ::= <<
<\t>units::<scale.namespace>::<scale.className>
>>

tags_header(unitType) ::= <<
<declaration()>

#ifndef <unitType.tagsHeaderIncludeGurad>
#define <unitType.tagsHeaderIncludeGurad>

<unitType.tagIncludes:{header | #include <header><\n>}>

namespace units {
namespace <unitType.namespace> {
namespace tags
{

using <unitType.codeName>  = <unitType.code>;

<unitType.unitScales:{scale | struct <scale.tagName>
{
<\t>using typeCode = <scale.typeCodeName>;
<\t>static constexpr double scale = <scale.scale>;
<\t>static std::string singularName();
<\t>static std::string pluralName();
};
}>

}
}
}

#endif /* <unitType.tagsHeaderIncludeGurad> */
>>

tags_src(unitType) ::= <<
<declaration()>

#include \<units/tags/<unitType.tagsHeaderFileName>\>

namespace units {
namespace <unitType.namespace> {
namespace tags
{

using std::string;

<unitType.unitScales:{scale | string <scale.tagName>::singularName() { return "<scale.singularName>"; }
string <scale.tagName>::pluralName() { return "<scale.pluralName>"; }

}>

}
}
}
>>

unit_type_header(unitType) ::= <<
<declaration()>

#ifndef <unitType.headerIncludeGurad>
#define <unitType.headerIncludeGurad>

<unitType.unitIncludes:{header | #include <header><\n>}>
#include \<units/tags/<unitType.tagsHeaderFileName>\>

namespace units {
namespace <unitType.namespace>
{

<unitType.unitScales:{scale |
using <scale.className> = NumericValue\<tags::<scale.tagName>\>;<\n>}>

<unitType.unitScales:{scale |
constexpr auto operator"" _<scale.userDefinedLiteral>(unsigned long long int value)
{
	return <scale.className>{(double)value};
}
constexpr auto operator"" _<scale.userDefinedLiteral>(long double value)
{
	return <scale.className>{(double)value};
}
}>

}
}

#endif /* <unitType.headerIncludeGurad> */
>>

unit_type_tests(unitType) ::= <<
<declaration()>

#include \<units/cases.h\>
#include \<units/<unitType.headerFileName>\>
#include \<units/all_units.h\>

#include \<gtest/gtest.h\>

using namespace testing;
using namespace units::<unitType.namespace>;

template\<class UnitType\>
class Test<unitType.camelCaseName>BasicUsage : public Test
{
};

using MyTypes = Types\<<unitType.upperCaseName>_UNITS()\>;

TYPED_TEST_CASE(Test<unitType.camelCaseName>BasicUsage, MyTypes);

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_double_constructor)
{
	double value = 5.123;
	TypeParam unit{value};
	EXPECT_EQ(unit.value(), value);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_copy_constructor)
{
	double value = 5.123;
	TypeParam unit1{value};
	TypeParam unit2{unit1};
	EXPECT_EQ(unit1.value(), value);
	EXPECT_EQ(unit2.value(), value);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_move_constructor)
{
	double value = 5.123;
	auto unit2 = [&value]{
		TypeParam unit1{value};
		return std::move(unit1);
	}();
	EXPECT_EQ(unit2.value(), value);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_assignment)
{
	double value1 = 5.123;
	double value2 = 3.956;
	TypeParam unit1{value1};
	TypeParam unit2{value2};
	unit1 = unit2;
	EXPECT_EQ(unit1.value(), value2);
	EXPECT_EQ(unit2.value(), value2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_double_operator)
{
	double value = 5.123;
	TypeParam unit{value};
	EXPECT_EQ((double)unit, value);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_operator_plus_equal)
{
	double value1 = 5.123;
	double value2 = 3.956;
	TypeParam unit1{value1};
	TypeParam unit2{value2};
	unit1 += unit2;
	EXPECT_EQ(unit1.value(), value1 + value2);
	EXPECT_EQ(unit2.value(), value2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_operator_minus_equal)
{
	double value1 = 5.123;
	double value2 = 3.956;
	TypeParam unit1{value1};
	TypeParam unit2{value2};
	unit1 -= unit2;
	EXPECT_EQ(unit1.value(), value1 - value2);
	EXPECT_EQ(unit2.value(), value2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_operator_multiply_equal)
{
	double value = 5.123;
	double scalar = 3.956;
	TypeParam unit{value};
	unit *= scalar;
	EXPECT_EQ(unit.value(), value * scalar);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_operator_divide_equal)
{
	double value = 5.123;
	double scalar = 3.956;
	TypeParam unit{value};
	unit /= scalar;
	EXPECT_EQ(unit.value(), value / scalar);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_equality_pass)
{
	double value1 = 5.123;
	TypeParam unit1{value1};
	TypeParam unit2{value1};
	EXPECT_TRUE(unit1 == unit2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_equality_not_pass)
{
	double value1 = 5.123;
	double value2 = 5.122;
	TypeParam unit1{value1};
	TypeParam unit2{value2};
	EXPECT_FALSE(unit1 == unit2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_inequality_pass)
{
	double value1 = 5.123;
	double value2 = 5.122;
	TypeParam unit1{value1};
	TypeParam unit2{value2};
	EXPECT_TRUE(unit1 != unit2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_inequality_not_pass)
{
	double value1 = 5.123;
	TypeParam unit1{value1};
	TypeParam unit2{value1};
	EXPECT_FALSE(unit1 != unit2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_less_than_pass)
{
	double value1 = 5.122;
	double value2 = 5.123;
	TypeParam unit1{value1};
	TypeParam unit2{value2};
	EXPECT_TRUE(unit1 \< unit2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_less_than_not_pass_because_of_equality)
{
	double value1 = 5.122;
	TypeParam unit1{value1};
	TypeParam unit2{value1};
	EXPECT_FALSE(unit1 \< unit2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_less_than_not_pass_because_of_too_big_value)
{
	double value1 = 5.123;
	double value2 = 5.122;
	TypeParam unit1{value1};
	TypeParam unit2{value2};
	EXPECT_FALSE(unit1 \< unit2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_less_than_equal_pass_because_of_small_enough_value)
{
	double value1 = 5.122;
	double value2 = 5.123;
	TypeParam unit1{value1};
	TypeParam unit2{value2};
	EXPECT_TRUE(unit1 \<= unit2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_less_than_equal_not_pass_because_of_equality)
{
	double value1 = 5.122;
	TypeParam unit1{value1};
	TypeParam unit2{value1};
	EXPECT_TRUE(unit1 \<= unit2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_less_than_equal_not_pass_because_of_too_big_value)
{
	double value1 = 5.123;
	double value2 = 5.122;
	TypeParam unit1{value1};
	TypeParam unit2{value2};
	EXPECT_FALSE(unit1 \<= unit2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_bigger_than_pass)
{
	double value1 = 5.123;
	double value2 = 5.122;
	TypeParam unit1{value1};
	TypeParam unit2{value2};
	EXPECT_TRUE(unit1 > unit2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_bigger_than_pass_because_of_equality)
{
	double value1 = 5.122;
	TypeParam unit1{value1};
	TypeParam unit2{value1};
	EXPECT_FALSE(unit1 > unit2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_bigger_than_not_pass_because_of_too_small_value)
{
	double value1 = 5.122;
	double value2 = 5.123;
	TypeParam unit1{value1};
	TypeParam unit2{value2};
	EXPECT_FALSE(unit1 > unit2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_bigger_than_equal_pass_because_of_big_enough_value)
{
	double value1 = 5.123;
	double value2 = 5.122;
	TypeParam unit1{value1};
	TypeParam unit2{value2};
	EXPECT_TRUE(unit1 >= unit2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_bigger_than_equal_pass_because_of_equality)
{
	double value1 = 5.122;
	TypeParam unit1{value1};
	TypeParam unit2{value1};
	EXPECT_TRUE(unit1 >= unit2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_bigger_than_equal_not_pass_because_of_too_small_value)
{
	double value1 = 5.122;
	double value2 = 5.123;
	TypeParam unit1{value1};
	TypeParam unit2{value2};
	EXPECT_FALSE(unit1 >= unit2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_operator_plus)
{
	double value1 = 5.123;
	double value2 = 3.956;
	TypeParam unit1{value1};
	TypeParam unit2{value2};
	auto unit3 = unit1 + unit2;
	EXPECT_EQ(unit1.value(), value1);
	EXPECT_EQ(unit2.value(), value2);
	EXPECT_EQ(unit3.value(), value1 + value2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_self_operator_minus)
{
	double value = 5.123;
	TypeParam unit1{value};
	auto unit2 = -unit1;
	EXPECT_EQ(unit1.value(), value);
	EXPECT_EQ(unit2.value(), -value);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_operator_minus)
{
	double value1 = 5.123;
	double value2 = 3.956;
	TypeParam unit1{value1};
	TypeParam unit2{value2};
	auto unit3 = unit1 - unit2;
	EXPECT_EQ(unit1.value(), value1);
	EXPECT_EQ(unit2.value(), value2);
	EXPECT_EQ(unit3.value(), value1 - value2);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_multiply_by_scalar_from_the_left)
{
	double value = 5.123;
	double scalar = 7.1;
	TypeParam unit1{value};
	auto unit2 = scalar * unit1;
	EXPECT_EQ(unit1.value(), value);
	EXPECT_EQ(unit2.value(), scalar * value);
	EXPECT_EQ(unit2.scalarRatio(unit1), scalar);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_multiply_by_scalar_from_the_right)
{
	double value = 5.123;
	double scalar = 7.1;
	TypeParam unit1{value};
	auto unit2 = unit1 * scalar;
	EXPECT_EQ(unit1.value(), value);
	EXPECT_EQ(unit2.value(), scalar * value);
	EXPECT_EQ(unit2.scalarRatio(unit1), scalar);
}

TYPED_TEST(Test<unitType.camelCaseName>BasicUsage, test_divide_by_scalar)
{
	double value = 5.123;
	double scalar = 7.1;
	TypeParam unit1{value};
	auto unit2 = unit1 / scalar;
	EXPECT_EQ(unit1.value(), value);
	EXPECT_EQ(unit2.value(), value / scalar);
}

// ============================================================

class Test<unitType.camelCaseName>UnitsPrintings : public TestUnitsPrintings
{
};

<unitType.unitScales:{scale|
TEST_F(Test<unitType.camelCaseName>UnitsPrintings, print_<scale.lowerUnderscoreName>)
\{
	check_print\<<scale.className>\>("<scale.pluralName>");
\}
}>

// ============================================================

#define TEST_<unitType.upperCaseName>_USER_DEFINE_LITERALS(Name, name) \
		TEST_USER_DEFINES_LITERALS(<unitType.camelCaseName>, Name, name);

<unitType.unitScales:{scale|
TEST_<unitType.upperCaseName>_USER_DEFINE_LITERALS(<scale.className>, <scale.userDefinedLiteral>);
}>
>>

all_units(schema) ::= <<
<declaration()>

<schema.unitTypes:{unitType | #include \<units/<unitType.headerFileName>\><\n>}>

#ifndef UNIT_TESTS_ALL_UNITS_H_
#define UNIT_TESTS_ALL_UNITS_H_

<schema.unitTypes:{unitType|#define <unitType.upperCaseName>_UNITS() \
<first(unitType.unitScales): {scale|<full_scale_declaration(scale)>}><rest(unitType.unitScales): {scale |, \\<\n><full_scale_declaration(scale)>}>

}>
#define ALL_UNITS() \
<first(schema.unitTypes): {unitType|<\t><unitType.upperCaseName>_UNITS()}><rest(schema.unitTypes): {unitType |, \\<\n><\t><unitType.upperCaseName>_UNITS()}>

#endif /* UNIT_TESTS_ALL_UNITS_H_ */
>>

conversion_test_suite(testSuite) ::= <<
<declaration()>

<testSuite.includes:{include | #include <include><\n>}>
<testSuite.namespaces:{namespace | using namespace <namespace>;<\n>}>

class <testSuite.testSuiteName> : public TestUnitsConversions
{
};

<testSuite.testCases: {testCase|TEST_F(<testSuite.testSuiteName>, <testCase.testName>)
{
	check_conversion\<<testCase.from>, <testCase.to>\>(<testCase.value>);
}
}>

>>

constants_group(constantsGroup) ::= <<
<declaration()>

#ifndef _<constantsGroup.shoutyUnderscoreName>_
#define _<constantsGroup.shoutyUnderscoreName>_

<constantsGroup.includes: {includePath|#include \<<includePath>\><\n>}>

namespace units {
namespace <constantsGroup.lowerUnderscoreName>
{

<constantsGroup.constants:{constant|//<constant.description>
constexpr <constant.unitScale> <constant.name>{<constant.value>};

}>
}
}

#endif /* _<constantsGroup.shoutyUnderscoreName>_ */
>>

