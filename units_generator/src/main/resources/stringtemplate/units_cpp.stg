group units;

declaration() ::= <<
/* This file is auto generated.
 * DO NOT EDIT IT MANUALLY!
 */
>>

include(header) ::= <<
#include <header><\n>
>>

scale_class(scale) ::= <<
using <scale.className> = NumericValue\<tags::<scale.tagName>\>;<\n>
>>

scale_user_defined_literal(scale) ::= <<
USER_DEFINED_LITERALS(<scale.className>, <scale.userDefinedLiteral>);<\n>
>>

scale_names_declarations(scale) ::= <<
string <scale.tagName>::singularName() { return "<scale.singularName>"; }
string <scale.tagName>::pluralName() { return "<scale.pluralName>"; }<\n><\n>
>>

scale_tag(scale) ::= <<
struct <scale.tagName>
{
<\t>using typeCode = <scale.typeCodeName>;
<\t>static constexpr double scale = <scale.scale>;
<\t>static std::string singularName();
<\t>static std::string pluralName();
};<\n>
>>


full_scale_declaration(scale) ::= <<
units::<scale.namespace>::<scale.className>
>>
all_unit_type_scales(unitType) ::= <<

#define <unitType.upperCaseName>_UNITS() \
<first(unitType.unitScales): { scale | <\t><full_scale_declaration(scale)>}><rest(unitType.unitScales): {scale |, \\<\n><\t><full_scale_declaration(scale)>}>


>>

tags_header(unitType) ::= <<
<declaration()>

#ifndef <unitType.tagsHeaderIncludeGurad>
#define <unitType.tagsHeaderIncludeGurad>

<unitType.tagIncludes:{header | <include(header)>}>

namespace units {
namespace <unitType.namespace> {
namespace tags
{

using <unitType.codeName>  = <unitType.code>;

<unitType.unitScales:{scale | <scale_tag(scale)>}>

}
}
}

#endif /* <unitType.tagsHeaderIncludeGurad> */
>>

tags_src(unitType) ::= <<
<declaration()>

#include \<units/tags/<unitType.tagsHeaderFileName>\>

namespace units {
namespace <unitType.namespace> {
namespace tags
{

using std::string;

<unitType.unitScales:{scale | <scale_names_declarations(scale)>}>

}
}
}
>>

unit_type_header(unitType) ::= <<
<declaration()>

#ifndef <unitType.headerIncludeGurad>
#define <unitType.headerIncludeGurad>

<unitType.unitIncludes:{header | <include(header)>}>
#include \<units/tags/<unitType.tagsHeaderFileName>\>

namespace units {
namespace <unitType.namespace>
{

<unitType.unitScales:{scale | <scale_class(scale)>}>

<unitType.unitScales:{scale | <scale_user_defined_literal(scale)>}>

}
}

#endif /* <unitType.headerIncludeGurad> */
>>

all_units(schema) ::= <<
<declaration()>

<schema.unitTypes:{unitType | #include \<units/<unitType.headerFileName>\><\n>}>

#ifndef UNIT_TESTS_ALL_UNITS_H_
#define UNIT_TESTS_ALL_UNITS_H_

<schema.unitTypes:all_unit_type_scales()>

#define ALL_UNITS() \
<first(schema.unitTypes): { unitType | <\t><unitType.upperCaseName>_UNITS()}><rest(schema.unitTypes): {unitType |, \\<\n><\t><unitType.upperCaseName>_UNITS()}>

#endif /* UNIT_TESTS_ALL_UNITS_H_ */
>>

write_test_case(testCase) ::= <<
TEST_F(<testSuite.testSuiteName>, <testCase.testName>)
{
	check_conversion\<<testCase.from>, <testCase.to>\>(<testCase.value>);
}

>>

conversion_test_suite(testSuite) ::= <<
<declaration()>

<testSuite.includes:{include | #include <include><\n>}>
<testSuite.namespaces:{namespace | using namespace <namespace>;<\n>}>

class <testSuite.testSuiteName> : public TestUnitsConversions
{
};

<testSuite.testCases:write_test_case()>

>>

